worker {

  kafka {
    bootstrap-servers = ${KAFKA_BASE}
    topic = ${KAFKA_HEART_TOPIC}
    group-id = ${KAFKA_GROUP_ID}

    producer {
      # defaults
      parallelism = 100
      close-timeout = 60s
      use-dispatcher = "akka.kafka.default-dispatcher"
      eos-commit-interval = 100ms
      kafka-clients {
      }
    }

    consumer {
      # defaults
      poll-interval = 50ms
      poll-timeout = 50ms
      stop-timeout = 30s
      close-timeout = 20s
      commit-timeout = 15s
      commit-time-warning = 1s
      commit-refresh-interval = infinite
      use-dispatcher = "akka.kafka.default-dispatcher"
      wait-close-partition = 500ms
      position-timeout = 5s
      offset-for-times-timeout = 5s
      metadata-request-timeout = 5s
      eos-draining-check-interval = 30ms
      partition-handler-warning = 5s
      connection-checker {
        enable = false
        max-retries = 3
        check-interval = 15s
        backoff-factor = 2.0
      }
      kafka-clients {
        enable.auto.commit = false
      }
    }

    committer {
      max-batch = 100
      max-interval = 10s
      parallelism = 1
    }
  }

}

akka {
  loglevel = "INFO"
  loglevel = ${?LOGLEVEL}
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"

  actor {
    provider = cluster
    debug {
      unhandled = on
    }
//    serialization-bindings {
//      "com.synerise.steam.common.JacksonSerializable" = jackson-json
//    }
  }

  kafka {
    topic = "identified-tracker-v3"
    topic = ${?TOPIC}
    consumer {
      poll-interval: 1s
      poll-interval: ${?KAFKA_POLL_INTERVAL}
      wakeup-timeout = 30s
      wakeup-debug = true
      group-id: "super-soft-steam-testing"
      group-id: ${?KAFKA_GROUP_ID}

      kafka-clients {
        group.id: "super-soft-steam-testing"
        group.id: ${?KAFKA_GROUP_ID}
        bootstrap.servers: "172.19.25.133:9092,172.19.25.134:9092,172.19.25.138:9092,172.19.25.150:9092"
        bootstrap.servers: ${?KAFKA_BROKERS}
        enable.auto.commit: false
        auto.offset.reset: "latest"
        max.poll.records: 500
        max.partition.fetch.bytes: 1048576
        fetch.max.bytes: 52428800
        partition.assignment.strategy: "org.apache.kafka.clients.consumer.RoundRobinAssignor"
      }
    }
  }

  http {
    server.websocket.periodic-keep-alive-max-idle = 1 second
  }

  cluster {
    roles = ["worker"]
    auto-down-unreachable-after = 10s // remove if using downing policy
  }

  coordinated-shutdown.run-by-jvm-shutdown-hook = on //this is the default value
  coordinated-shutdown.terminate-actor-system = on
}

akka.management {
  cluster.bootstrap {
    contact-point-discovery {
      # For the kubernetes API this value is substributed into the %s in pod-label-selector
      service-name = "super-soft-steam-cluster"

      # pick the discovery method you'd like to use:
      discovery-method = kubernetes-api
    }
  }
}

akka.discovery {
  kubernetes-api {
    # in fact, this is already the default:
    pod-label-selector = "cluster=%s"
  }
}

worker-dispatcher {
  type = Dispatcher
  executor = "thread-pool-executor"
  thread-pool-executor {
    fixed-pool-size = 4
  }
  throughput = 1
}
